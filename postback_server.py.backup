#!/usr/bin/env python3
"""
Postback Server for Zerodha Authentication
Receives request_token from Zerodha and saves it for token_generator.py
"""

import os
import logging
import json
from flask import Flask, request, jsonify
from datetime import datetime
import pytz

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/home/ubuntu/main_trading/logs/postback_server.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class PostbackServer:
    def __init__(self):
        self.app = Flask(__name__)
        # Load config
        try:
            with open('/home/ubuntu/main_trading/config.json', 'r') as f:
                self.config = json.load(f)
        except Exception as e:
            logger.error(f"Failed to load config: {e}")
            raise
        
        self.ist_tz = pytz.timezone('Asia/Kolkata')
        self.request_token = None
        self.token_timestamp = None
        self.setup_routes()
        logger.info("PostbackServer initialized")

    def send_notification_simple(self, message):
        """Simple notification - log and print"""
        logger.info(f"NOTIFICATION: {message}")
        print(f"NOTIFICATION: {message}")

    def setup_routes(self):
        """Define Flask routes"""
        
        @self.app.route('/')
        def home():
            """Home endpoint"""
            return jsonify({
                'status': 'running',
                'service': 'Zerodha Postback Server',
                'timestamp': datetime.now(self.ist_tz).strftime('%Y-%m-%d %H:%M:%S %Z')
            })

        @self.app.route('/status')
        def status():
            """Status check endpoint"""
            try:
                token_age = (datetime.now(self.ist_tz).timestamp() - self.token_timestamp) if self.token_timestamp else 0
                status_data = {
                    'status': 'running',
                    'timestamp': datetime.now(self.ist_tz).strftime('%Y-%m-%d %H:%M:%S %Z'),
                    'request_token': 'present' if self.request_token else None,
                    'token_age_seconds': token_age
                }
                logger.info("Status endpoint accessed")
                return jsonify(status_data)
            except Exception as e:
                logger.error(f"Status endpoint error: {e}")
                return jsonify({'status': 'error', 'message': str(e)}), 500

        @self.app.route('/health')
        def health():
            """Health check endpoint"""
            try:
                token_age = (datetime.now(self.ist_tz).timestamp() - self.token_timestamp) if self.token_timestamp else 0
                health_data = {
                    'status': 'healthy',
                    'timestamp': datetime.now(self.ist_tz).strftime('%Y-%m-%d %H:%M:%S %Z'),
                    'request_token': 'present' if self.request_token else None,
                    'token_age_seconds': token_age,
                    'needs_refresh': token_age > self.config.get('auth_timeout_seconds', 300)
                }
                logger.info("Health endpoint accessed")
                return jsonify(health_data)
            except Exception as e:
                logger.error(f"Health endpoint error: {e}")
                return jsonify({'status': 'error', 'message': str(e)}), 500

        @self.app.route('/postback', methods=['GET', 'POST'])
        def postback():
            """Handle Zerodha postback with request_token"""
            try:
                # Log full request for debugging
                logger.info(f"Request method: {request.method}, Args: {request.args}, Form: {request.form}")
                
                # Try form data (POST) first, then query params (GET)
                request_token = request.form.get('request_token') or request.args.get('request_token')
                status = request.form.get('status') or request.args.get('status')
                action = request.form.get('action') or request.args.get('action')
                
                logger.info(f"Postback received: status={status}, action={action}, token={'present' if request_token else 'missing'}")
                
                if status != 'success' or not request_token:
                    logger.error(f"Invalid postback: status={status}, token={'present' if request_token else 'missing'}")
                    self.send_notification_simple(f"ERROR: Invalid postback - status={status}")
                    return jsonify({'status': 'error', 'message': 'Invalid postback parameters'}), 400

                self.request_token = request_token
                self.token_timestamp = datetime.now(self.ist_tz).timestamp()
                
                # Save request_token to file
                os.makedirs('/home/ubuntu/main_trading/data', exist_ok=True)
                token_file = '/home/ubuntu/main_trading/data/request_token.txt'
                with open(token_file, 'w') as f:
                    f.write(request_token)
                logger.info(f"Request token saved to {token_file}")

                self.send_notification_simple("SUCCESS: Request token received and saved")
                
                # Return success page
                return '''
                <html>
                    <head><title>Authentication Successful</title></head>
                    <body style="font-family: Arial; text-align: center; padding: 50px;">
                        <h1 style="color: green;">âœ… Authentication Successful!</h1>
                        <p>Request token has been received and saved.</p>
                        <p>You can close this window now.</p>
                        <p><strong>Token Generator will now process your authentication.</strong></p>
                        <hr>
                        <small>Zerodha Trading System - Postback Server</small>
                    </body>
                </html>
                '''
                
            except Exception as e:
                logger.error(f"Postback error: {e}")
                self.send_notification_simple(f"ERROR: Postback processing failed - {str(e)[:100]}")
                return jsonify({'status': 'error', 'message': str(e)}), 500

        @self.app.route('/clear_token')
        def clear_token():
            """Clear request_token and file"""
            try:
                self.request_token = None
                self.token_timestamp = None
                token_file = '/home/ubuntu/main_trading/data/request_token.txt'
                if os.path.exists(token_file):
                    os.remove(token_file)
                    logger.info(f"Cleaned up {token_file}")
                
                self.send_notification_simple("SUCCESS: Request token cleared")
                return jsonify({"status": "success", "message": "Token cleared"})
                
            except Exception as e:
                logger.error(f"Failed to clear token: {e}")
                self.send_notification_simple(f"ERROR: Token cleanup failed - {str(e)[:100]}")
                return jsonify({"status": "error", "message": str(e)}), 500

    def run(self, host='127.0.0.1', port=8001):
        """Run the Flask server"""
        try:
            logger.info(f"Starting postback server on {host}:{port}")
            self.app.run(host=host, port=port, debug=False, threaded=True)
        except Exception as e:
            logger.error(f"Failed to start server: {e}")
            raise

def main():
    """Main entry point"""
    logger.info("Starting postback_server.py")
    try:
        server = PostbackServer()
        server.run()
    except Exception as e:
        logger.error(f"Fatal error: {e}")
        raise

if __name__ == "__main__":
    main()
